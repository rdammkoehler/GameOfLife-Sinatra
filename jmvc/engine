if(_args < 2 || _args[0]!="install"){
	print("Usage: js jmvc/engine install url name")
	quit();
}

load('jmvc/rhino/loader.js')
rhinoLoader(function(){
  include.plugins('util/recursive_http_fetcher', 'util/prompt');
});



Engine =  function(uri, name){
    if(! uri.match(/^http/)){
        this.name = uri;
        return this.check_engine_list();
    }
    this.uri =  uri;
    if(name){
        this.name = name;
    }else
        this.guess_name(uri);
}
Engine.prototype = {
    install_using_http: function(options){
        this.install_dependancies();
        
        
        options = options || {};
        new include.File("engines/"+this.name).mkdir();
        var fetcher = new RecursiveHTTPFetcher(this.uri, -1, "engines/"+this.name)
        fetcher.quiet = options.quiet || true
        fetcher.fetch();
        print("\n  "+this.name+" engine downloaded.")
    },
    guess_name: function(url){
      this.name = new include.File(url).basename();
      if(this.name == 'trunk' || ! this.name){
          this.name = new include.File( new include.File(url).dir() ).basename();
      }
    },
	check_engine_list : function(){
        print("  Looking for engine ...")
        
        var plugin_list_source = readUrl("http://javascriptmvc.googlecode.com/svn/trunk/jmvc/rhino/command/engine_list.json");
        var plugin_list;
        eval("plugin_list = "+plugin_list_source);
        this.uri = plugin_list[this.name]
        if(!this.uri){
            print("  no plugin named '"+this.name+"' was found.  Maybe try supplying a url.");
            quit();
        }
        print("  Engine found.")
        
    },
    install_dependancies : function(){
        print("  Checking dependencies ...")
        var depend_url = this.uri + (this.uri.lastIndexOf("/") == this.uri.length - 1 ? "" : "/" )+"dependencies.json"
        var depend_text;
        try{
           depend_text = readUrl(depend_url);
        }catch(e){};
        if(!depend_text ) {
            print("  No dependancies")
            return;
        }
        print("  Found dependancies ...")
        var dependancies = JSONparse( depend_text )
        if(dependancies.plugins){
            for(var plug_name in dependancies.plugins){
                if(prompt.yesno("Install dependancy "+plug_name+"? (yN):")){
                    print("Installing "+plug_name+"...")
                    var plugin = new Plugin(dependancies.plugins[plug_name] , plug_name);
                    plugin.install_using_http();
                }
            }
        }
        
        if(dependancies.engines){
            for(var plug_name in dependancies.engines){
                if(prompt.yesno("Install dependancy "+plug_name+"? (yN):")){
                    print("Installing "+plug_name+"...")
                    var engine = new Engine(dependancies.engines[plug_name] , plug_name);
                    engine.install_using_http();
                }
            }
        }
        print("  Installed all dependencies for "+this.name)
    }
};
(function(){
     var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g   
    
    
    JSONparse = function (text, reviver) {

            var j;

            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }

            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (/^[\],:{}\s]*$/.
                test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').
                replace(/["'][^"\\\n\r]*["']|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
                replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {


                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.
                return typeof reviver === 'function' ? walk({'': j}, '') : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSONparse');
        };
    
    
})();

e = new Engine(_args[1], _args[2]);
e.install_using_http();




